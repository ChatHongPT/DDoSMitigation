# -*- fill-column: 76; -*-
#+TITLE: XDP 프로그래밍 실전 안내서
#+OPTIONS: ^:nil

이 저장소에는 커널과 통합된 고성능 프로그래밍 가능 패킷 처리를 제공하는 리눅스 커널에서 
eXDP(eXpress Data Path) 시스템을 위한 프로그램을 효과적으로 작성하는 데 필요한 기본 단계를 
소개하는 것을 목표로 하는 튜토리얼이 포함되어 있습니다.

튜토리얼은 여러 개의 레슨으로 구성되어 있으며, 각 레슨에는 고유한 디렉토리가 있습니다. 
"basicXX"로 시작하는 레슨부터 시작하여 해당 레슨에 대한 지침은 각 디렉토리에 있는 README.org 파일을 읽으십시오.

XDP에 대한 소개 및 개요를 보려면 아래를 계속 읽으십시오
이 튜토리얼에서 배우거나 [[file:basic01-xdp-pass/README.org][첫 레슨으로]]이동합니다.

* 목차                                                     :TOC:
- [[#introduction][Introduction]]
- [[#first-step-setup-dependencies][First step: Setup dependencies]]
- [[#how-the-lessons-are-organised][How the lessons are organised]]
  - [[#basic-setup-lessons][Basic setup lessons]]
  - [[#packet-processing-lessons][Packet processing lessons]]
  - [[#advanced-lessons][Advanced lessons]]

* Introduction

XDP는 업스트림 리눅스 커널의 일부이며, 커널이 데이터에 대한 다른 처리를 하기 전에 각 도착 패킷에 대해 
실행될 패킷 처리 프로그램을 커널에 설치할 수 있게 해준다. 프로그램들은 제한된 C로 작성되며, 
안전성이 검증된 후 실행되고 커널에서 JIT 컴파일된 eBPF 바이트코드 형식으로 컴파일된다. 이 접근 방식은 뛰어난 유연성과 고성능을 제공하며, 
나머지 시스템과 잘 통합된다. XDP에 대한 일반적인 소개는, 
[[https://github.com/xdp-project/xdp-paper/blob/master/xdp-the-express-data-path.pdf][the academic paper (pdf)]], or the [[https://cilium.readthedocs.io/en/latest/bpf/][Cilium BPF reference guide]]를 참조하십시오.

이 자습서는 XDP 시스템을 사용하여 유용한 프로그램을 성공적으로 작성하는 데 필요한 여러 단계를 실질적으로 소개하는 것을 목표로 한다. 
우리는 당신이 리눅스 네트워킹에 대한 기본적인 이해와 =iproute2= 도구 모음으로 구성하는 방법을 알고 있다고 가정하지만, 
eBPF나 XDP에 대한 이전 경험은 없다고 가정한다. 이전 프로그래밍 경험도 도움이 된다: 모든 수업은 C로 작성되며 몇 가지 기본적인 포인터 산술 및 앨리어싱을 포함한다.

The tutorial is a work in progress, and was initially created for use as a
live tutorial at the [[https://www.netdevconf.org/0x13/session.html?tutorial-XDP-hands-on][Netdev Conference]] in Prague in March 2019. Since the
kernel BPF subsystem continues to develop at a rapid pace, this tutorial has
not kept up with all developments. However, everything presented here will
work with recent kernels, and this tutorial functions as a self-contained
introduction that anyone can go through to learn the XDP basics. Input and
contributions to advance towards this goal are very welcome; just open
issues or pull requests in the [[https://github.com/xdp-project/xdp-tutorial/][Github repository]].

* First step: Setup dependencies

Before you can start completing step in this tutorial, you will need to
install a few dependencies on your system. These are described in
[[file:setup_dependencies.org]].

We also provide a helper script that will set up a test environment with
virtual interfaces for you to test your code on. This is introduced in the
basic lessons, and also has [[file:testenv/README.org][it's own README file]].

* How the lessons are organised
The tutorial is organised into a number of lessons; each lesson has its own
subdirectory, and the lessons are grouped by category:

- Basic setup (directories starting with basicXX)
- Packet processing (directories starting with packetXX)
- Advanced topics (directories starting with advancedXX)

We recommend you start with the "basic" lessons, and follow the lessons in
each category in numerical order. Read the README.org file in each lesson
directory for instructions on how to complete the lesson.

** Basic setup lessons
We recommend you start with these lessons, as they will teach you how to
compile and inspect the eBPF programs that will implement your packet
processing code, how to load them into the kernel, and how to inspect the
state afterwards. As part of the basic lessons you will also be writing an
eBPF program loader that you will need in subsequent lessons.

** Packet processing lessons
Once you have the basics figured out and know how to load programs into the
kernel, you are ready to start processing some packets. The lessons in the
packet processing category will teach you about the different steps needed
to process data packets, including parsing, rewriting, instructing the
kernel about what to do with the packet after processing, and how to use
helpers to access existing kernel functionality.

** Advanced lessons
After having completed the lessons in the basic and packet processing
categories, you should be all set to write your first real XDP program that
will do useful processing of the packets coming into the system. However,
there are some slightly more advanced topics that will probably be useful
once you start expanding your program to do more things.

The topics covered in the advanced lessons include how to make eBPF programs
in other parts of the kernel interact with your XDP program, passing
metadata between programs, best practices for interacting with user space and
kernel features, and how to run multiple XDP programs on a single interface.
