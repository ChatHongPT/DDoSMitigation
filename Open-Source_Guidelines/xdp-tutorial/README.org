# -*- fill-column: 76; -*-
#+TITLE: XDP 프로그래밍 실전 안내서
#+OPTIONS: ^:nil

이 저장소에는 커널과 통합된 고성능 프로그래밍 가능 패킷 처리를 제공하는 리눅스 커널에서 
eXDP(eXpress Data Path) 시스템을 위한 프로그램을 효과적으로 작성하는 데 필요한 기본 단계를 
소개하는 것을 목표로 하는 튜토리얼이 포함되어 있습니다.

튜토리얼은 여러 개의 레슨으로 구성되어 있으며, 각 레슨에는 고유한 디렉토리가 있습니다. 
"basicXX"로 시작하는 레슨부터 시작하여 해당 레슨에 대한 지침은 각 디렉토리에 있는 README.org 파일을 읽으십시오.

XDP에 대한 소개 및 개요를 보려면 아래를 계속 읽으십시오
이 튜토리얼에서 배우거나 [[file:basic01-xdp-pass/README.org][첫 레슨으로]]이동합니다.

* 목차                                                     :TOC:
- [[#introduction][Introduction]]
- [[#first-step-setup-dependencies][First step: Setup dependencies]]
- [[#how-the-lessons-are-organised][How the lessons are organised]]
  - [[#basic-setup-lessons][Basic setup lessons]]
  - [[#packet-processing-lessons][Packet processing lessons]]
  - [[#advanced-lessons][Advanced lessons]]

* Introduction

XDP는 업스트림 리눅스 커널의 일부이며, 커널이 데이터에 대한 다른 처리를 하기 전에 각 도착 패킷에 대해 
실행될 패킷 처리 프로그램을 커널에 설치할 수 있게 해준다. 프로그램들은 제한된 C로 작성되며, 
안전성이 검증된 후 실행되고 커널에서 JIT 컴파일된 eBPF 바이트코드 형식으로 컴파일된다. 이 접근 방식은 뛰어난 유연성과 고성능을 제공하며, 
나머지 시스템과 잘 통합된다. XDP에 대한 일반적인 소개는, 
[[https://github.com/xdp-project/xdp-paper/blob/master/xdp-the-express-data-path.pdf][the academic paper (pdf)]], or the [[https://cilium.readthedocs.io/en/latest/bpf/][Cilium BPF reference guide]]를 참조하십시오.

이 자습서는 XDP 시스템을 사용하여 유용한 프로그램을 성공적으로 작성하는 데 필요한 여러 단계를 실질적으로 소개하는 것을 목표로 한다. 
우리는 당신이 리눅스 네트워킹에 대한 기본적인 이해와 =iproute2= 도구 모음으로 구성하는 방법을 알고 있다고 가정하지만, 
eBPF나 XDP에 대한 이전 경험은 없다고 가정한다. 이전 프로그래밍 경험도 도움이 된다: 모든 수업은 C로 작성되며 몇 가지 기본적인 포인터 산술 및 앨리어싱을 포함한다.

이 튜토리얼은 진행 중인 작업이며, 처음에는 2019년 3월 프라하에서 열린 [[https://www.netdevconf.org/0x13/session.html?tutorial-XDP-hands-on][Netdev Conference]]에서 
라이브 튜토리얼로 사용하기 위해 만들어졌다. 커널 BPF 하위 시스템이 빠른 속도로 계속 개발되기 때문에 이 튜토리얼이 모든 개발을 따라가지는 못했다. 
그러나 여기에 제시된 모든 것은 최근 커널에서 작동하며, 이 튜토리얼은 누구나 XDP 기본 사항을 배우기 위해 겪을 수 있는 도입으로 기능한다. 
이 목표를 향해 전진하기 위한 입력과 기여는 매우 환영한다. [[https://github.com/xdp-project/xdp-tutorial/][Github repository]]에서 문제를 열거나 요청을 열기만 하면 된다.

# first step setup dependencies

이 튜토리얼의 단계를 완료하기 전에 시스템에 몇 가지 종속성을 설치해야 합니다. [[file:setup_dependencies.org]]에 설명되어 있습니다.

우리는 코드를 테스트할 수 있는 가상 인터페이스로 테스트 환경을 설정하는 헬퍼 스크립트도 제공합니다. 
이는 기본 강의에서 소개되며, 또한 [[file:testenv/README.org][it's own README file]]을 가지고 있습니다.

# how the lessons are organised
튜토리얼은 여러 개의 레슨으로 구성되어 있으며, 각 레슨에는 고유한 레슨이 있습니다
서브디렉토리 및 클래스는 카테고리별로 그룹화됩니다:

- Basic 설정 (basicXX로 시작하는 디렉터리)
- Packet 처리 (packetXX로 시작하는 디렉터리)
- Advanced 항목 (advancedXX로 시작하는 디렉터리)

"basic" 수업으로 시작하여 각 범주의 수업을 숫자 순서대로 따라가는 것이 좋습니다. 
수업을 완료하는 방법에 대한 지침은 각 수업 디렉토리에 있는 README.org 파일을 읽으십시오.

** Basic setup lessons
다음 강의부터 시작하는 것이 좋습니다. 이 강의들은 패킷 처리 코드를 구현할 eBPF 프로그램을 컴파일하고 검사하는 방법, 
이를 커널에 로드하는 방법, 그리고 이후 상태를 검사하는 방법을 가르칠 것입니다. 
기본 강의의 일환으로, 이후 강의에서 필요한 eBPF 프로그램 로더를 작성할 것입니다.

** Packet processing lessons
기본적인 내용을 파악하고 프로그램을 커널에 로드하는 방법을 알게 되면, 
이제 패킷 처리에 착수할 준비가 되었습니다. 패킷 처리 카테고리의 강의에서는 데이터 패킷을 처리하는 데 필요한 다양한 단계에 대해 가르쳐 줄 것입니다. 
이 단계에는 파싱, 재작성, 패킷 처리 후 커널에게 수행할 작업에 대한 지시, 그리고 기존 커널 기능에 액세스하기 위해 헬퍼를 사용하는 방법 등이 포함됩니다.

** Advanced lessons
기본 및 패킷 처리 카테고리의 강의를 완료하면 첫 번째 실제 XDP 프로그램을 작성하여 시스템으로 들어오는 패킷을 유용하게 처리할 준비가 모두 마련됩니다. 
그러나 프로그램을 확장하여 더 많은 작업을 수행하기 시작하면 아마도 유용할 것으로 예상되는 약간 더 고급 주제가 있습니다.

고급 강의에서 다루는 주제로는 다른 부분의 커널에서 eBPF 프로그램이 XDP 프로그램과 상호 작용하는 방법, 
프로그램 간 메타데이터 전달, 사용자 공간 및 커널 기능과 상호 작용하는 최상의 방법, 그리고 단일 인터페이스에서 여러 XDP 프로그램을 실행하는 방법이 있습니다.
